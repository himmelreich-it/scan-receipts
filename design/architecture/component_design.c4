specification {
  element person
  element system
  element container
  element component
  element element
  
  relationship uses
  relationship calls
  relationship reads
  relationship writes
  relationship processes
}

model {
  user = person 'Business Owner' {
    description 'Tech-savvy business owner who processes receipts for expense tracking'
  }
  
  receiptProcessor = system 'Receipt Processor System' {
    description 'Automated receipt processing tool that extracts financial information from receipt images'
    
    tuiInterface = container 'TUI Interface' {
      description 'Advanced terminal user interface with tables and interactive menus'
      technology 'Python TUI framework'
      
      mainScript = component 'Main Script' {
        description 'Entry point for receipt processing execution'
        technology 'Python main.py'
      }
      
      startupScreen = component 'Startup Screen' {
        description 'Displays system status, file counts, and available actions'
        technology 'Python TUI display'
      }
      
      menuController = component 'Menu Controller' {
        description 'Manages menu navigation and user input handling'
        technology 'Python TUI interaction'
      }
      
      tableRenderer = component 'Table Renderer' {
        description 'Renders data tables for staging review and validation display'
        technology 'Python TUI tables'
      }
      
      progressMonitor = component 'Progress Monitor' {
        description 'Real-time progress display with file-by-file updates'
        technology 'Python TUI progress bars'
      }
      
      validationDisplay = component 'Validation Display' {
        description 'Shows staging validation results and import readiness status'
        technology 'Python TUI validation views'
      }
      
      errorReporter = component 'Error Reporter' {
        description 'User-friendly error display with recovery guidance'
        technology 'Python TUI error handling'
      }
    }
    
    receiptProcessingEngine = container 'Receipt Processing Engine' {
      description 'Core business logic for receipt analysis and data extraction'
      technology 'Python hexagonal architecture'
      
      // Domain Layer Components
      receiptEntity = component 'Receipt Entity' {
        description 'Receipt domain entity with business logic and validation'
        technology 'Python domain model'
      }
      
      extractionValueObjects = component 'Extraction Value Objects' {
        description 'Amount, Tax, Currency, Date value objects with validation'
        technology 'Python value objects'
      }
      
      processingPolicies = component 'Processing Policies' {
        description 'Business rules for confidence scoring and validation'
        technology 'Python domain services'
      }
      
      // Application Layer Components
      processReceiptUseCase = component 'Process Receipt Use Case' {
        description 'Complete receipt processing workflow including AI extraction, validation, and file management'
        technology 'Python application service'
      }
      
      validateStagingUseCase = component 'Validate Staging Use Case' {
        description 'Validates CSV staging data and file synchronization'
        technology 'Python application service'
      }
      
      importToXlsxUseCase = component 'Import to XLSX Use Case' {
        description 'Imports validated CSV data to XLSX with sequential numbering'
        technology 'Python application service'
      }
      
      validateResultsUseCase = component 'Validate Results Use Case' {
        description 'Validates extracted data and applies business rules'
        technology 'Python application service'
      }
      
      // Ports (Interfaces)
      receiptRepositoryPort = component 'Receipt Repository Port' {
        description 'Interface for receipt data persistence'
        technology 'Python ABC interface'
      }
      
      aiExtractionPort = component 'AI Extraction Port' {
        description 'Interface for AI-powered data extraction service'
        technology 'Python ABC interface'
      }
      
      fileSystemPort = component 'File System Port' {
        description 'Interface for file operations and management'
        technology 'Python ABC interface'
      }
      
      xlsxIntegrationPort = component 'XLSX Integration Port' {
        description 'Interface for XLSX file operations and data import'
        technology 'Python ABC interface'
      }
      
      configurationPort = component 'Configuration Port' {
        description 'Interface for system configuration access and validation'
        technology 'Python ABC interface'
      }
    }
    
    infrastructureLayer = container 'Infrastructure Layer' {
      description 'External adapters and technical implementations'
      technology 'Python adapters'
      
      // File Management Adapters
      fileSystemAdapter = component 'File System Adapter' {
        description 'Handles file operations, scanning, organization, error logging, and duplicate detection'
        technology 'Python pathlib/hashlib'
      }
      
      configurationAdapter = component 'Configuration Adapter' {
        description 'Loads configuration from .env file with validation and folder creation'
        technology 'Python python-dotenv/pathlib'
      }
      
      // AI Service Adapter
      anthropicAdapter = component 'Anthropic API Adapter' {
        description 'Integrates with Claude API for receipt analysis'
        technology 'Python anthropic library'
      }
      
      // Data Persistence Adapters
      csvStagingAdapter = component 'CSV Staging Adapter' {
        description 'Handles CSV staging operations including read/write for receipt data'
        technology 'Python csv module'
      }
      
      xlsxIntegrationAdapter = component 'XLSX Integration Adapter' {
        description 'Handles XLSX import with sequential numbering and validation'
        technology 'Python openpyxl/xlsxwriter'
      }
      
    }
  }
  
  externalSystems = system 'External Systems' {
    description 'External services and file system'
    
    anthropicAPI = container 'Anthropic Claude API' {
      description 'AI service for receipt text analysis and data extraction'
      technology 'REST API'
    }
    
    fileSystem = container 'Local File System' {
      description 'Input and output file storage'
      technology 'Operating system'
      
      incomingFolder = component 'Incoming Folder' {
        description 'Contains new receipt files to be processed'
        technology 'File system directory'
      }
      
      scannedFolder = component 'Scanned Folder' {
        description 'Successfully processed receipts during analysis'
        technology 'File system directory'
      }
      
      importedFolder = component 'Imported Folder' {
        description 'Final archive for imported receipt files'
        technology 'File system directory'
      }
      
      failedFolder = component 'Failed Folder' {
        description 'Failed receipts with error logs'
        technology 'File system directory'
      }
      
      csvOutput = component 'CSV Output File' {
        description 'Structured receipt data staging file'
        technology 'CSV file format'
      }
      
      xlsxOutput = component 'XLSX Output File' {
        description 'Source of truth for finalized expense entries'
        technology 'Excel XLSX format'
      }
    }
  }
  
  // Primary Actor Relationships
  user -> receiptProcessor.tuiInterface.mainScript 'Executes uv run main.py'
  
  // Configuration Loading
  receiptProcessor.tuiInterface.mainScript -> receiptProcessor.receiptProcessingEngine.configurationPort 'Loads startup config'
  
  // TUI Interface Internal Relationships
  receiptProcessor.tuiInterface.mainScript -> receiptProcessor.tuiInterface.startupScreen 'Shows initial state'
  receiptProcessor.tuiInterface.mainScript -> receiptProcessor.tuiInterface.menuController 'Manages interactions'
  receiptProcessor.tuiInterface.menuController -> receiptProcessor.tuiInterface.tableRenderer 'Displays data tables'
  receiptProcessor.tuiInterface.menuController -> receiptProcessor.tuiInterface.validationDisplay 'Shows validation status'
  receiptProcessor.tuiInterface.mainScript -> receiptProcessor.tuiInterface.progressMonitor 'Updates progress'
  receiptProcessor.tuiInterface.mainScript -> receiptProcessor.tuiInterface.errorReporter 'Reports errors'
  
  // TUI to Application Layer
  receiptProcessor.tuiInterface.menuController -> receiptProcessor.receiptProcessingEngine.processReceiptUseCase 'Initiates processing'
  receiptProcessor.tuiInterface.menuController -> receiptProcessor.receiptProcessingEngine.validateStagingUseCase 'Validates staging'
  receiptProcessor.tuiInterface.menuController -> receiptProcessor.receiptProcessingEngine.importToXlsxUseCase 'Imports to XLSX'
  
  // Application Layer Orchestration
  receiptProcessor.receiptProcessingEngine.processReceiptUseCase -> receiptProcessor.receiptProcessingEngine.validateResultsUseCase 'Validates results'
  receiptProcessor.receiptProcessingEngine.importToXlsxUseCase -> receiptProcessor.receiptProcessingEngine.validateStagingUseCase 'Pre-import validation'
  
  // Use Cases to Domain
  receiptProcessor.receiptProcessingEngine.processReceiptUseCase -> receiptProcessor.receiptProcessingEngine.receiptEntity 'Creates receipt entity'
  receiptProcessor.receiptProcessingEngine.validateResultsUseCase -> receiptProcessor.receiptProcessingEngine.extractionValueObjects 'Validates data'
  receiptProcessor.receiptProcessingEngine.validateResultsUseCase -> receiptProcessor.receiptProcessingEngine.processingPolicies 'Applies business rules'
  
  // Application Layer to Ports
  receiptProcessor.receiptProcessingEngine.processReceiptUseCase -> receiptProcessor.receiptProcessingEngine.fileSystemPort 'File operations'
  receiptProcessor.receiptProcessingEngine.processReceiptUseCase -> receiptProcessor.receiptProcessingEngine.aiExtractionPort 'AI analysis'
  receiptProcessor.receiptProcessingEngine.processReceiptUseCase -> receiptProcessor.receiptProcessingEngine.receiptRepositoryPort 'Data persistence'
  receiptProcessor.receiptProcessingEngine.validateStagingUseCase -> receiptProcessor.receiptProcessingEngine.fileSystemPort 'File validation'
  receiptProcessor.receiptProcessingEngine.importToXlsxUseCase -> receiptProcessor.receiptProcessingEngine.xlsxIntegrationPort 'XLSX operations'
  receiptProcessor.receiptProcessingEngine.importToXlsxUseCase -> receiptProcessor.receiptProcessingEngine.fileSystemPort 'File movement'
  
  // Infrastructure Implementations
  receiptProcessor.receiptProcessingEngine.fileSystemPort -> receiptProcessor.infrastructureLayer.fileSystemAdapter 'Implemented by'
  receiptProcessor.receiptProcessingEngine.aiExtractionPort -> receiptProcessor.infrastructureLayer.anthropicAdapter 'Implemented by'
  receiptProcessor.receiptProcessingEngine.receiptRepositoryPort -> receiptProcessor.infrastructureLayer.csvStagingAdapter 'Implemented by'
  receiptProcessor.receiptProcessingEngine.xlsxIntegrationPort -> receiptProcessor.infrastructureLayer.xlsxIntegrationAdapter 'Implemented by'
  receiptProcessor.receiptProcessingEngine.configurationPort -> receiptProcessor.infrastructureLayer.configurationAdapter 'Implemented by'
  
  // Infrastructure to External Systems
  receiptProcessor.infrastructureLayer.anthropicAdapter -> externalSystems.anthropicAPI 'API calls'
  receiptProcessor.infrastructureLayer.fileSystemAdapter -> externalSystems.fileSystem.incomingFolder 'Reads files'
  receiptProcessor.infrastructureLayer.fileSystemAdapter -> externalSystems.fileSystem.scannedFolder 'Stages files'
  receiptProcessor.infrastructureLayer.fileSystemAdapter -> externalSystems.fileSystem.importedFolder 'Archives files'
  receiptProcessor.infrastructureLayer.fileSystemAdapter -> externalSystems.fileSystem.failedFolder 'Error files'
  receiptProcessor.infrastructureLayer.csvStagingAdapter -> externalSystems.fileSystem.csvOutput 'Stages data'
  receiptProcessor.infrastructureLayer.xlsxIntegrationAdapter -> externalSystems.fileSystem.xlsxOutput 'Imports data'
  
  // Configuration Distribution
  receiptProcessor.infrastructureLayer.configurationAdapter -> receiptProcessor.infrastructureLayer.fileSystemAdapter 'Provides folder paths'
  receiptProcessor.infrastructureLayer.configurationAdapter -> receiptProcessor.infrastructureLayer.csvStagingAdapter 'Provides CSV path'
  receiptProcessor.infrastructureLayer.configurationAdapter -> receiptProcessor.infrastructureLayer.xlsxIntegrationAdapter 'Provides XLSX path'
}

views {
  view componentOverview {
    title 'Receipt Processor - Component Architecture'
    description 'Component-level view showing hexagonal architecture implementation'
    include *
    
    style receiptProcessor.receiptProcessingEngine.receiptEntity {
      color primary
    }
    
    style receiptProcessor.receiptProcessingEngine.extractionValueObjects {
      color primary
    }
    
    style receiptProcessor.receiptProcessingEngine.processingPolicies {
      color primary
    }
    
    style receiptProcessor.receiptProcessingEngine.processReceiptUseCase {
      color secondary
    }
    
    style receiptProcessor.receiptProcessingEngine.validateResultsUseCase {
      color secondary
    }
    
    style receiptProcessor.infrastructureLayer {
      color muted
    }
  }
  
  view domainFocus {
    title 'Domain and Application Layers'
    description 'Focus on core business logic and use cases'
    include receiptProcessor.receiptProcessingEngine.*
    
    style receiptProcessor.receiptProcessingEngine.receiptEntity {
      color primary
      size large
    }
  }
  
  view infrastructureFocus {
    title 'Infrastructure and External Systems'
    description 'Focus on adapters and external integrations'
    include receiptProcessor.infrastructureLayer.*, externalSystems.*
    
    style externalSystems {
      color muted
    }
  }
}